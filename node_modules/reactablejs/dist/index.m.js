import interact from 'interactjs';
import { createElement, createRef, Component } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var options = [
    'draggable',
    'resizable',
    'gesturable',
    'dropzone',
];
var events = [
    // Interact Events
    'DragStart',
    'DragMove',
    'DragInertiaStart',
    'DragEnd',
    'ResizeStart',
    'ResizeMove',
    'ResizeInertiaStart',
    'ResizeEnd',
    'GestureStart',
    'GestureMove',
    'GestureEnd',
    // Drop Events
    'DropActivate',
    'DropdEactivate',
    'DragEnter',
    'DragLeave',
    'DropMove',
    'Drop',
    // Pointer Events
    'Down',
    'Move',
    'Up',
    'Cancel',
    'Tap',
    'DoubleTap',
    'Hold',
];
var getDisplayName = function (BaseComponent) {
    return BaseComponent.displayName || 'Component';
};
var reactable = function (BaseComponent) {
    var _a;
    return _a = /** @class */ (function (_super) {
            __extends(Reactable, _super);
            function Reactable() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.node = createRef();
                return _this;
            }
            // componentDidMount of parent is called after all his children is mounted
            Reactable.prototype.componentDidMount = function () {
                var _this = this;
                if (!this.node.current) {
                    console.error(' you should apply getRef props in the dom element'); // eslint-disable-line
                    return;
                }
                this.interactable = interact(this.node.current);
                options.forEach(function (option) {
                    if (option in _this.props) {
                        _this.interactable[option](_this.props[option]);
                    }
                });
                events.forEach(function (event) {
                    var handler = _this.props["on" + event];
                    if (typeof handler === 'function') {
                        _this.interactable
                            .on(event.toLowerCase(), handler);
                    }
                });
            };
            Reactable.prototype.componentWillUnmount = function () {
                this.interactable.unset();
            };
            Reactable.prototype.baseProps = function (props) {
                var baseProps = __assign({}, props);
                options.forEach(function (option) { return delete baseProps[option]; });
                events.forEach(function (event) { return delete baseProps["on" + event]; });
                return baseProps;
            };
            Reactable.prototype.render = function () {
                return (createElement(BaseComponent, __assign({}, this.baseProps(this.props), { getRef: this.node })));
            };
            return Reactable;
        }(Component)),
        _a.displayName = "reactable(" + getDisplayName(BaseComponent) + ")",
        _a;
};

export default reactable;
